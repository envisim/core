import {
  AreaCollection,
  type CategoricalProperty,
  type GeoJSON as GJ,
  GeometricPrimitive,
  Layer,
  LineCollection,
  PointCollection,
} from '@envisim/geojson-utils';

import {
  SampleBaseOptions,
  SampleBeltOnAreaOptions,
  SampleFeatureOptions,
  SamplePointOptions,
  SampleSystematicLineOnAreaOptions,
} from './options.js';

type SampleContinuousOptions =
  | SampleBaseOptions
  | SamplePointOptions
  | SampleFeatureOptions<GJ.PointFeature>
  | SampleFeatureOptions<GJ.LineFeature>
  | SampleFeatureOptions<GJ.AreaFeature>
  | SampleSystematicLineOnAreaOptions
  | SampleBeltOnAreaOptions;

interface SampleStratifiedOptions<O extends SampleContinuousOptions> {
  stratify: string;
  options: O | O[];
}

/**
 * Returns the followi
 * - 110: stratify does not exist on propertyRecord
 * - 120: stratify property is not categorical
 * - 130: stratify property has no values
 * - 140: options is an array, but its length does not match the length of
 *        stratify property values
 *
 * @returns `0` if check passes
 */
export function sampleStratifiedOptionsCheck(
  layer: Layer<PointCollection> | Layer<LineCollection> | Layer<AreaCollection>,
  {stratify, options}: SampleStratifiedOptions<SampleContinuousOptions>,
): number {
  if (!Object.hasOwn(layer.propertyRecord, stratify)) {
    // stratify must exist on propertyRecord
    return 110;
  }

  const property = layer.propertyRecord[stratify];

  if (property.type !== 'categorical') {
    // stratify prop must be categorical -- no stratification on numerical
    return 120;
  }

  if (property.values.length === 0) {
    // stratify prop must have values
    return 130;
  }

  if (Array.isArray(options) && options.length !== property.values.length) {
    // if options is an array, the length must match the number of prop values
    return 140;
  }

  return 0;
}

export function sampleStratified<
  IN extends Layer<LineCollection> | Layer<AreaCollection>,
  OUT extends
    | Layer<PointCollection>
    | Layer<LineCollection>
    | Layer<AreaCollection>,
  OPTS extends SampleContinuousOptions,
>(
  fn: (arg0: IN, arg1: OPTS) => OUT,
  layer: IN,
  {stratify, options}: SampleStratifiedOptions<OPTS>,
): OUT {
  const optionsError = sampleStratifiedOptionsCheck(layer, {stratify, options});
  if (optionsError !== 0) {
    throw new RangeError(`sampleStratified error: ${optionsError}`);
  }

  // Already checked that it exists
  const property = layer.propertyRecord[stratify] as CategoricalProperty;
  const optionsArray = Array.isArray(options)
    ? options
    : Array.from<OPTS>({
        length: property.values.length,
      }).fill(options);

  let stratumSampleLayers: OUT[];
  if (Layer.isLayer(layer, GeometricPrimitive.LINE)) {
    stratumSampleLayers = property.values.map((_, i) => {
      const features = layer.collection.features.filter(
        (f) => f.properties[stratify] === i,
      );

      return fn(
        new Layer(
          new LineCollection({features}, true),
          layer.propertyRecord,
        ) as IN,
        optionsArray[i],
      );
    });
  } else if (Layer.isLayer(layer, GeometricPrimitive.AREA)) {
    stratumSampleLayers = property.values.map((_, i) => {
      const features = layer.collection.features.filter(
        (f) => f.properties[stratify] === i,
      );

      return fn(
        new Layer(
          new AreaCollection({features}, true),
          layer.propertyRecord,
        ) as IN,
        optionsArray[i],
      );
    });
  } else {
    throw Error('Incorrect input Layer');
  }

  return stratumSampleLayers.reduce((prev, curr) => {
    // TS can't work out if all layers are of same type, which should be
    // guaranteed by all layers being generated by the same function.
    /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */
    prev.appendFromLayer(curr as any);
    return prev;
  }) as OUT;
}
